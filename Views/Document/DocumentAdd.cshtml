@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using DMS_Hino.Data
@model DMS_Hino.ViewModel.DocumentViewModel
@inject DatabaseContext _context

@{
    ViewData["Title"] = "Add Document";
}

<h2>Add Document</h2>

<form class="document-form" action="/Document/DocumentAdd" method="post" enctype="multipart/form-data">
    <div class="form-container">
        <!-- Left side: Drag and Drop area -->
        <div class="left-side">
            <input type="hidden" id="CategoryId" name="CategoryId" value="@Model.SelectedCategoryId" />

            <label for="DocumentItem" class="upload-label">Upload Document</label>
            <div id="dropZone" class="upload-area" onclick="document.getElementById('DocumentItem').click()">
                <!-- Preview Area (Initially hidden) -->
                <div id="previewContainer" style="display: none;">
                    <div id="previewArea">
                        <!-- Dynamic preview content will be inserted here -->
                    </div>
                    <button type="button" id="removeFileButton" class="remove-btn" onclick="removeFile()">&#10006;</button>
                </div>

                <!-- Default message when no file is uploaded -->
                <p id="defaultUploadMessage">Click to upload</p>
                <input type="file" id="DocumentItem" name="DocumentItem" accept=".pdf, .docx, .doc, .txt, .xls, .xlsx, .ppt, .png, .jpeg, .jpg" onchange="previewDocument(event)" style="display: none;">
            </div>

            <div class="checkbox-container">
                <label for="IsPublic">Is Public?</label>
                <input type="checkbox" id="IsPublic" name="IsPublic" onchange="toggleDivisionDepartmentPopup()">
            </div>

            <div class="field-group">
                <label for="DivisionId">Division</label>
                <select id="DivisionId" name="DivisionId" onchange="toggleDepartmentField()">
                    <option value="">Select a division</option>
                    @foreach (var division in Model.DivisionDepartmentViewModel.Divisions)
                    {
                        <option value="@division.Id">@division.Name</option>
                    }
                </select>
            </div>

            <div class="field-group" id="departmentField" style="display: none;">
                <label for="DepartmentId">Department</label>
                <select id="DepartmentId" name="DepartmentId">
                    <option value="">Select a department</option>
                    <!-- Departments will be loaded dynamically -->
                </select>
            </div>


            <!-- Expiration Fields -->
            <div class="field-group">
                <div class="checkbox-container">
                    <label for="isExpiration">Has Expiration?</label>
                    <input type="checkbox" id="isExpiration" name="isExpiration" onchange="toggleExpirationFields()">
                </div>
            </div>

            <!-- Expiration Date and Reminder (initially hidden) -->
            <div id="expirationFields" style="display: none;">
                <div class="field-group">
                    <label for="ExpDate">Document Expired Date</label>
                    <input type="date" id="ExpDate" name="ExpDate">
                </div>

                <div class="field-group">
                    <label for="Reminder">Reminder</label>
                    <div class="reminder-container">
                        <input type="number" id="Reminder" name="Reminder">
                        <span>days</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right side: Form Fields -->
        <div class="right-side">
            <div class="field-group">
                <label for="Name">Document Name</label>
                <input type="text" id="Name" name="Name" required>
            </div>

            <div class="field-group">
                <label for="Number">Document Number</label>
                <input type="text" id="Number" name="Number" required>
            </div>

            <div class="field-group">
                <label for="VersionName">Version Name (Optional)</label>
                <input type="text" id="VersionName" name="VersionName">
            </div>

            <div class="field-group">
                <label for="ReleasedDate">Document Released Date</label>
                <input type="date" id="ReleasedDate" name="ReleasedDate">
            </div>

            <div class="field-group">
                <label for="Tag">Document Tag</label>
                <input type="text" id="Tag" name="Tag">
            </div>

            <div class="field-group">
                <label for="Location">Document Location</label>
                <input type="text" id="Location" name="Location">
            </div>

            <button type="submit" class="save-btn">Save</button>
        </div>
    </div>
</form>



<script>
    function toggleExpirationFields() {
        var isChecked = document.getElementById("isExpiration").checked;
        document.getElementById("expirationFields").style.display = isChecked ? "grid" : "none";
    }

    function previewDocument(event) {
        const file = event.target.files[0];
        const previewContainer = document.getElementById('previewContainer');
        const previewArea = document.getElementById('previewArea');
        const defaultUploadMessage = document.getElementById('defaultUploadMessage');

        previewArea.innerHTML = '';
        if (file) {
            const fileType = file.type;
            const fileUrl = URL.createObjectURL(file);

            previewContainer.style.display = 'block';
            defaultUploadMessage.style.display = 'none';

            if (fileType === 'application/pdf') {
                previewArea.innerHTML = `<iframe src="${fileUrl}" width="100%" height="200px"></iframe>`;
            } else if (fileType.startsWith('image/')) {
                previewArea.innerHTML = `<img src="${fileUrl}" alt="Document Preview" style="max-width:100%; height:auto;">`;
            } else {
                previewArea.innerHTML = `<p>File uploaded: ${file.name}</p><p>Preview not available for this file type.</p>`;
            }
        }
    }

    function removeFile() {
        document.getElementById('DocumentItem').value = '';
        document.getElementById('previewContainer').style.display = 'none';
        document.getElementById('defaultUploadMessage').style.display = 'block';
    }

    function toggleDepartmentField() {
        var divisionId = document.getElementById("DivisionId").value;
        var departmentField = document.getElementById("departmentField");
        var departmentSelect = document.getElementById("DepartmentId");

        // Show or hide the department field based on division selection
        departmentField.style.display = divisionId ? "block" : "none";

        // Clear previous department options
        departmentSelect.innerHTML = '<option value="">Select a department</option>';

        // Load departments if a division is selected
        if (divisionId) {
            fetch(`/Document/GetDepartmentsByDivision?divisionId=${divisionId}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(department => {
                        var option = document.createElement("option");
                        option.value = department.id;
                        option.text = department.name;
                        departmentSelect.add(option);
                    });
                })
                .catch(error => console.error('Error loading departments:', error));
        }
    }

    function closeDivisionDepartmentPopup() {
        document.getElementById("divisionDepartmentPopup").style.display = "none";
    }

    function loadDepartments() {
        const divisionId = document.getElementById("DivisionId").value;
        const departmentSelect = document.getElementById("DepartmentId");

        departmentSelect.innerHTML = '<option value="">Select a department</option>';

        if (divisionId) {
            const departments = @Html.Raw(JsonSerializer.Serialize(Model.Departments));
            const filteredDepartments = departments.filter(d => d.DivisionId === divisionId);

            filteredDepartments.forEach(department => {
                departmentSelect.innerHTML += `<option value="${department.Id}">${department.Name}</option>`;
            });
        }
    }
</script>

<style>
    /* Styles for popup */
    .popup {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        width: 300px;
        text-align: center;
    }

    .field-group {
        margin-bottom: 15px;
    }
</style>
