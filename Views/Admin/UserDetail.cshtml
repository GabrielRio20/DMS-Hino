@model DMS_Hino.ViewModel.UserViewModel

<h2>User Details</h2>

<div class="d-flex justify-content-between mb-3">
    <h4>Details for @Model.Username</h4>

    <!-- Buttons to Edit, Save, and Cancel -->
    <div>
        <button id="editButton" class="btn btn-primary" onclick="toggleEdit()">Edit</button>
        <button id="saveButton" class="btn btn-success d-none" type="submit" form="userForm">Save</button>
        <button id="cancelButton" class="btn btn-secondary d-none" type="button" onclick="cancelEdit()">Cancel</button>
    </div>
</div>

<form asp-action="SaveUser" method="post" id="userForm">
    <!-- Hidden field for the User Id -->
    <input type="hidden" asp-for="Id" />

    <!-- Username (display as plain text initially, editable in edit mode) -->
    <div class="form-group">
        <label>Username:</label>
        <p id="usernameDisplay">@Model.Username</p>
        <input asp-for="Username" class="form-control d-none" id="usernameInput" />
    </div>

    <!-- Password (display as plain text, editable as text field in edit mode) -->
    <div class="form-group">
        <label>Password:</label>
        <p id="passwordDisplay">******</p>
        <input asp-for="Password" type="password" class="form-control d-none" id="passwordInput" />
    </div>

    <!-- Role (display as plain text initially, dropdown in edit mode) -->
    <div class="form-group">
        <label>Role:</label>
        <p id="roleDisplay">@Model.Role</p>
        <select asp-for="Role" class="form-control d-none" id="roleDropdown">
            <option value="User">User</option>
            <option value="Admin">Admin</option>
        </select>
    </div>

    <!-- Dropdown for Division -->
    <div class="form-group">
        <label asp-for="DivisionId">Division:</label>
        <p id="divisionDisplay">@Model.Division?.Name</p>
        <select asp-for="DivisionId" class="form-control d-none" id="divisionDropdown" required onchange="filterDepartments()">
            <option value="">Select Division</option>
            @foreach (var division in Model.Divisions)
            {
                <option value="@division.Id"
                        selected="@(Model.DivisionId == division.Id ? "selected" : "")">
                    @division.Name
                </option>
            }
        </select>
    </div>

    <!-- Dropdown for Department -->
    <div class="form-group">
        <label asp-for="DepartmentId">Department:</label>
        <p id="departmentDisplay">@Model.Department?.Name</p>
        <select asp-for="DepartmentId" class="form-control d-none" id="departmentDropdown" required>
            <option value="">Select Department</option>
            @foreach (var department in Model.Departments)
            {
                <option value="@department.Id" data-division-id="@department.DivisionId"
                        selected="@(Model.DepartmentId == department.Id ? "selected" : "")">
                    @department.Name
                </option>
            }
        </select>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Set initial selections
        setInitialSelection(document.getElementById("divisionDropdown"));
        setInitialSelection(document.getElementById("departmentDropdown"));
    });

    function setInitialSelection(dropdown) {
        const selectedOption = dropdown.querySelector("[selected]");
        if (selectedOption) {
            selectedOption.selected = true;
        }
    }

    function toggleEdit() {
        // Show editable fields and hide display fields
        document.getElementById("usernameDisplay").classList.add("d-none");
        document.getElementById("usernameInput").classList.remove("d-none");

        document.getElementById("passwordDisplay").classList.add("d-none");
        document.getElementById("passwordInput").classList.remove("d-none");

        document.getElementById("roleDisplay").classList.add("d-none");
        document.getElementById("roleDropdown").classList.remove("d-none");

        document.getElementById("divisionDisplay").classList.add("d-none");
        document.getElementById("divisionDropdown").classList.remove("d-none");

        document.getElementById("departmentDisplay").classList.add("d-none");
        document.getElementById("departmentDropdown").classList.remove("d-none");

        document.getElementById("editButton").classList.add("d-none");
        document.getElementById("saveButton").classList.remove("d-none");
        document.getElementById("cancelButton").classList.remove("d-none");

        // Filter departments based on selected division
        filterDepartments();
    }

    function filterDepartments() {
        const selectedDivisionId = document.getElementById("divisionDropdown").value;
        const departmentDropdown = document.getElementById("departmentDropdown");

        // Show only departments that belong to the selected division
        Array.from(departmentDropdown.options).forEach(option => {
            const divisionId = option.getAttribute("data-division-id");
            if (!divisionId || divisionId === selectedDivisionId || option.value === "") {
                option.classList.remove("d-none");
            } else {
                option.classList.add("d-none");
            }
        });

        // Reset department selection if the division changes
        departmentDropdown.value = ""; // Reset department selection
    }

    function cancelEdit() {
        location.reload();
    }
</script>




